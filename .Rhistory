arm_data <- arm_data %>%
mutate(Age = ifelse(is.na(floor(as.numeric(difftime(Sys.Date(), as.Date(DOB), units = "weeks")) / 52.25)),
0,
floor(as.numeric(difftime(Sys.Date(), as.Date(DOB), units = "weeks")) / 52.25)))
# We need to translate all Armenian names to English
#Regions
arm_data$Region <- str_trim(arm_data$Region)
region_translation <- c(
"Սյունիք" = "Syunik",
"Երևան" = "Yerevan",
"Կոտայք" = "Kotayk",
"Արմավիր" = "Armavir",
"Վայոց ձոր" = "Vayots Dzor",
"Արցախ" = "Artsakh",
"Արարատ" = "Ararat",
"Շիրակ" = "Shirak",
"Գեղարքունիք" = "Gegharkunik",
"Տավուշ" = "Tavush",
"Լոռի" = "Lori",
"Արագածոտն" = "Aragatsotn",
"Ռուսաստան" = "Russia",
"Վրաստան" = "Georgia",
"ԱՄՆ" = "USA",
"Հունաստան" = "Greece",
"Ուկրաինա" = "Ukraine",
"Չեխիա" = "Czech Republic",
"Ֆրանսիա" = "France",
"Գերմանիա" = "Germany"
)
arm_data$Region <- region_translation[arm_data$Region]
arm_data$City <- str_trim(arm_data$City)
city_translation <- c(
"Գորիս" = "Goris",
"Երևան" = "Yerevan",
"Աբովյան" = "Abovyan",
"Կապան" = "Kapan",
"Փարաքար" = "Parakar",
"Արմավիր" = "Armavir",
"Վայք" = "Vayk",
"Գառնի" = "Garni",
"Մարտունի" = "Martuni",
"Հրազդան" = "Hrazdan",
"Արտաշատ" = "Artashat",
"Գյումրի" = "Gyumri",
"Քաջարան" = "Kajaran",
"Արարատ" = "Ararat",
"Մեղրի" = "Meghri",
"Վարդենիս" = "Vardenis",
"Վարդենիկ" = "Vardenik",
"Բերդ" = "Berd",
"Ստեփանակերտ" = "Stepanakert",
"Պռոշյան" = "Proshyan",
"Չարենցավան" = "Charentsavan",
"Սիսիան" = "Sisian",
"Ջրվեժ" = "Jrvezh",
"Վանաձոր" = "Vanadzor",
"Ագարակ" = "Agharak",
"Մասիս" = "Masis",
"Սպիտակ" = "Spitak",
"Վեդի" = "Vedi",
"Իջևան" = "Ijevan",
"Եղվարդ" = "Yeghvard",
"Նոր Հաճն" = "Nor Hachn",
"Աշտարակ" = "Ashtarak",
"Արթիկ" = "Artik",
"Աչաջուր" = "Achajur",
"Նոյեմբերյան" = "Noyemberyan",
"Վաղարշապատ" = "Vagharshapat",
"Տավուշ" = "Tavush",
"Ստեփանավան" = "Stepanavan",
"Մեծամոր" = "Metsamor",
"Դիլիջան" = "Dilijan",
"Ջերմուկ" = "Jermuk",
"Տաշիր" = "Tashir",
"Մոսկվա" = "Moscow",
"Տեղ" = "Tegh",
"Գավառ" = "Gavar",
"Թալին" = "Talin",
"Բյուրեղավան" = "Byureghavan",
"Քարակերտ" = "Karakert",
"Փարբի" = "Parpi",
"Ալավերդի" = "Alaverdi",
"Սևան" = "Sevan",
"Ճամբարակ" = "Chambarak",
"Եղեգնաձոր" = "Yeghegnadzor",
"Չարենցավ." = "Charentsavan",
"Տաղավարթ" = "Taghavard",
"Կարպ" = "Karp",
"Շուշի" = "Shushi",
"Բագրատաշեն" = "Bagratashen",
"Սլավյանսկ" = "Slavyansk",
"Արցախ" = "Artsakh",
"Բաղրամյան" = "Baghramyan",
"Փանիկ" = "Panik",
"Ապարան" = "Aparan",
"Փարպի" = "Parpi",
"Օշական" = "Oshakan",
"Թբիլիսի" = "Tbilisi",
"Այգեձոր" = "Aygezdor",
"Ախուրյան" = "Akhuryan",
"Սարուխան" = "Sarukhan",
"Նոր Էդիսեյա" = "Nor Ediseia",
"Մյասնիկյան" = "Myasnikyan",
"Թեհրան" = "Tehran",
"Պտղավան" = "Ptghavan",
"Արագած" = "Aragats",
"Խաչաղբյուր" = "Khachaghbyur",
"Պտղնի" = "Ptghni",
"Ազատան" = "Azatan",
"Ծաղկաձոր" = "Tsaghkadzor",
"Ուրցաձոր" = "Urtsadzor",
"Բյուրական" = "Byurakan",
"Քաշաթաղ" = "Kashatagh",
"Կոտայք" = "Kotayk",
"Մարալիկ" = "Maralik",
"Նոր Երզնկա" = "Nor Yerznka",
"Ձորաղբյուր" = "Dzoraghbyur",
"Ծակքար" = "Tsakkar",
"Շնող" = "Shnogh",
"Բերձոր" = "Berdzor",
"Ախթալա" = "Akhtala",
"Հաթերք" = "Haterk",
"Վայոց Ձոր" = "Vayots Dzor",
"Զովք" = "Zovk",
"Պրահա" = "Prague",
"Լոս Անջելես" = "Los Angeles",
"Կամո" = "Kamo",
"գ. Մխչյան" = "v. Mkhchyan",
"Ջուջևան" = "Jujevan",
"Կոռնիձոր" = "Kornidzor",
"Արամուս" = "Aramus",
"Բելգորոդ" = "Belgorod",
"Քանաքեռավան" = "Kanakeravan",
"Առինջ" = "Arinj",
"Բջնի" = "Bjni",
"Ասկերան" = "Askeran",
"Գեղարքունիք" = "Gegharkunik",
"Ջավախք" = "Javakhk",
"Արզնի" = "Arzni",
"Մասիա" = "Masis")
arm_data$City <- city_translation[arm_data$City]
gender_translation <- c(
"ար" = "M",
"իգ" = "F"
)
arm_data$Gender <- gender_translation[arm_data$Gender]
## As some countries are in the same column as the regions of Armenia, we create a new column country.
regions_list <- c("Ռուսաստան", "Վրաստան", "ԱՄՆ", "Հունաստան", "Ուկրաինա", "Չեխիա", "Ֆրանսիա", "Գերմանիա")
arm_data <- arm_data %>%
mutate(Country = ifelse(Region %in% regions_list, Region, "Հայաստան"))
country_translation <- c(
"Հայաստան" = "Armenia",
"Ռուսաստան" = "Russia",
"Վրաստան" = "Georgia",
"ԱՄՆ" = "USA",
"Հունաստան" = "Greece",
"Ուկրաինա" = "Ukraine",
"Չեխիա" = "Czech Republic",
"Ֆրանսիա" = "France",
"Գերմանիա" = "Germany"
)
arm_data$Country <- country_translation[arm_data$Country]
## For idnetifying the zodiac signs of the chess players, this get_zodiac() function is going to help us mutate the data
get_zodiac <- function(month, day) {
if (is.na(month) || is.na(day)) {
return(NA)
} else if ((month == 3 && day >= 21) || (month == 4 && day <= 19)) {
return("Aries")
} else if ((month == 4 && day >= 20) || (month == 5 && day <= 20)) {
return("Taurus")
} else if ((month == 5 && day >= 21) || (month == 6 && day <= 20)) {
return("Gemini")
} else if ((month == 6 && day >= 21) || (month == 7 && day <= 22)) {
return("Cancer")
} else if ((month == 7 && day >= 23) || (month == 8 && day <= 22)) {
return("Leo")
} else if ((month == 8 && day >= 23) || (month == 9 && day <= 22)) {
return("Virgo")
} else if ((month == 9 && day >= 23) || (month == 10 && day <= 22)) {
return("Libra")
} else if ((month == 10 && day >= 23) || (month == 11 && day <= 21)) {
return("Scorpio")
} else if ((month == 11 && day >= 22) || (month == 12 && day <= 21)) {
return("Sagittarius")
} else if ((month == 12 && day >= 22) || (month == 1 && day <= 19)) {
return("Capricorn")
} else if ((month == 1 && day >= 20) || (month == 2 && day <= 18)) {
return("Aquarius")
} else if ((month == 2 && day >= 19) || (month == 3 && day <= 20)) {
return("Pisces")
} else {
return(NA)
}
}
arm_data <- arm_data %>%
mutate(
Month = as.numeric(format(DOB, "%m")),
Day = as.numeric(format(DOB, "%d")),
Zodiac = mapply(get_zodiac, Month, Day)
) %>%
select(-Month, -Day)
unique(arm_data$Title)
title_translation <- c(
"ֆվ" = "FM",
"վթ" = "CM",
"գ" = "GM",
"կգ" = "WGM",
"կմվ" = "WIM",
"մվ" = "IM",
"կֆվ" = "WFM",
"կավ" = "WNM",
"կվթ" = "WCM",
"ավ" = "NM"
)
arm_data$Title <- title_translation[arm_data$Title]
arm_data$DOB <- as.Date(arm_data$DOB, format="%Y-%m-%d")
arm_data$Year_of_Birth <- as.numeric(format(arm_data$DOB, "%Y"))
# Convert DOB to Date format and extract year of birth
arm_data$DOB <- as.Date(arm_data$DOB, format="%Y-%m-%d")
arm_data$Year_of_Birth <- as.numeric(format(arm_data$DOB, "%Y"))
# Create a new column categorizing players born before and after 2004
arm_data$Born_After_2004 <- ifelse(arm_data$Year_of_Birth >= 2004, "After 2004", "Before 2004")
# Filter out rows with missing ratings and birth year
data_filtered <- arm_data %>% filter(!is.na(S_Rtg) & !is.na(Year_of_Birth))
rating_trend <- data_filtered %>%
group_by(Year_of_Birth, Born_After_2004) %>%
summarize(Average_Rating = mean(S_Rtg, na.rm=TRUE), .groups = "drop")
data_filtered <- data_filtered[is.finite(data_filtered$Games_Played), ]
data_filtered$Born_After_2004 <- factor(data_filtered$Born_After_2004,
levels = c("Before 2004", "After 2004"))
cleaned_data <- arm_data %>%
filter(!is.na(Title))
cleaned_data_summary <- cleaned_data %>%
count(Title) %>%
mutate(percentage = n / sum(n) * 100)
ordered_titles <- c("WCM", "WNM", "WFM", "NM", "CM", "WIM", "FM", "WGM", "IM", "GM")
arm_d = read.csv("Data/raw/armenian_data.csv")
arm_regions =  arm_d %>%
filter(Country %in% c("Armenia"))
arm_regions <- arm_regions %>%
filter(Region != "Artsakh")
mean_S_Rtg_per_region <- arm_regions %>%
group_by(Region) %>%
summarise(Mean_S_Rtg = mean(S_Rtg, na.rm = TRUE))  # na.rm = TRUE removes NA values in calculating mean
mean_R_Rtg_per_region <- arm_regions %>%
group_by(Region) %>%
summarise(Mean_R_Rtg = mean(R_Rtg, na.rm = TRUE))
arm <- st_read('Armenia_Marzes/Armenia_Marzes.shp')
# Calculate mean S_Rtg for each city
mean_s_rtg_by_city <- arm_d %>%
filter(!is.na(S_Rtg)) %>%
group_by(City) %>%
summarise(Mean_S_Rtg = mean(S_Rtg, na.rm = TRUE))
city_locations <- read.csv("Data/raw/am.csv")
city_coords <- city_locations %>%
select(city, lat, lng)
filtered_city_df <- city_coords %>%
filter(city %in% unique(arm_regions$City))
# Ensure that the city names are formatted consistently across both datasets
mean_s_rtg_by_city <- mean_s_rtg_by_city %>%
mutate(City = as.character(City))  # Ensure 'City' is character type, not factor
city_coords <- city_coords %>%
mutate(city = as.character(city))  # Ensure 'city' is character type, not factor
# Joining datasets based on city names
mean_ratings_with_coords <- left_join(mean_s_rtg_by_city, city_coords, by = c("City" = "city"))
# View the first few rows of the joined dataset to confirm it looks correct
filtered_city_points <- st_as_sf(filtered_city_df, coords = c("lng", "lat"), crs = 4326, remove = FALSE)
# Join this data with the spatial data
filtered_city_points <- filtered_city_points %>%
left_join(mean_s_rtg_by_city, by = c("city" = "City"))
result <- left_join(international_data, arm_d, by = c("ID" = "FIDE_ID"))
S_ratings <- result %>%
select(ID, Player, S_Rtg_international = S_Rtg.x, S_Rtg_arm = S_Rtg.y, DoB = DOB.y, Zodiac = Zodiac, Region = Region, Country = Country.x, R_Rtg_intern = R_Rtg.x, R_Rtg_arm = R_Rtg.y)
S_ratings_cleaned <- S_ratings %>%
filter(!is.na(S_Rtg_international) & S_Rtg_international != 0)
# View the result
S_ratings_cleaned <- S_ratings_cleaned %>%
mutate(Rating_Difference = S_Rtg_international - S_Rtg_arm)
arm_regions =  arm_d %>%
filter(Country %in% c("Armenia"))
arm_regions <- arm_regions %>%
filter(Region != "Artsakh")
mean_S_Rtg_per_region_arm <- arm_regions %>%
group_by(Region) %>%
summarise(Mean_S_Rtg = mean(S_Rtg, na.rm = TRUE))  # na.rm = TRUE removes NA values in calculating mean
mean_R_Rtg_per_region <- arm_regions %>%
group_by(Region) %>%
summarise(Mean_R_Rtg = mean(R_Rtg, na.rm = TRUE))
arm_regions =  arm_d %>%
filter(Country %in% c("Armenia"))
arm_regions <- arm_regions %>%
filter(Region != "Artsakh")
mean_S_Rtg_per_region <- arm_regions %>%
group_by(Region) %>%
summarise(Mean_S_Rtg = mean(S_Rtg, na.rm = TRUE))  # na.rm = TRUE removes NA values in calculating mean
mean_R_Rtg_per_region <- arm_regions %>%
group_by(Region) %>%
summarise(Mean_R_Rtg = mean(R_Rtg, na.rm = TRUE))
add_age <- function(data, year) {
data %>%
mutate(Age = year - Year)
}
assign_age_group <- function(age) {
if (is.na(age)) {
return(NA)  # Return NA for missing ages
} else if (age >= 13 & age <= 16) {
return("Other")
} else if (age >= 17 & age <= 20) {
return("17-20")
} else if (age >= 21 & age <= 24) {
return("21-24")
} else {
return("Other")
}
}
extract_year <- function(dob) {
if (is.na(dob) || nchar(dob) < 4) {
return(NA)
}
year_part <- substr(dob, nchar(dob)-1, nchar(dob))
if (!is.na(year_part) && grepl("^[0-9]{2}$", year_part)) {
if (as.numeric(year_part) < 24) {
return(paste0("20", year_part))
} else {
return(paste0("19", year_part))
}
} else {
return(NA)
}
}
arm_data_2020 <- read.csv("Data/raw/01.01.2020-national.csv", sep = ";", header = TRUE, stringsAsFactors=FALSE)
colnames(arm_data_2020)[c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)] <- c(
"N",
"Full_Name_arm",
"Full_Name",
"Region",
"City",
"Title",
"DOB",
"Gender",
"Nat_ID",
"Status",
"S_Rtg",
"Games_Played",
"Rating_Change",
"R_Rtg"
)
arm_data_2020 <- arm_data_2020[-c(1,2), ]
arm_data_2020$Year <- sapply(arm_data_2020$DOB, extract_year)
arm_data_2020 <- arm_data_2020 %>%
mutate_at(vars(Year, S_Rtg, Games_Played, Rating_Change, R_Rtg), as.numeric)
arm_data_2020$Gender <- gender_translation[arm_data_2020$Gender]
arm_data_2020$Region <- region_translation[arm_data_2020$Region]
arm_data_2020 <- add_age(arm_data_2020, 2020)
arm_data_2021 <- read.csv("Data/raw/01.01.2021-national.csv", sep = ";", header = TRUE, stringsAsFactors=FALSE)
colnames(arm_data_2021)[c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)] <- c(
"N",
"Full_Name_arm",
"Full_Name",
"Region",
"City",
"Title",
"DOB",
"Gender",
"Nat_ID",
"Status",
"S_Rtg",
"Games_Played",
"Rating_Change",
"R_Rtg"
)
arm_data_2021 <- arm_data_2021[-c(1, 2,3), ]
arm_data_2021$Year <- sapply(arm_data_2021$DOB, extract_year)
arm_data_2021 <- arm_data_2021 %>%
mutate_at(vars(Year, S_Rtg, Games_Played, Rating_Change, R_Rtg), as.numeric)
arm_data_2021$Gender <- gender_translation[arm_data_2021$Gender]
arm_data_2021$Region <- region_translation[arm_data_2021$Region]
arm_data_2021 <- add_age(arm_data_2021, 2021)
arm_data_2022 <- read.csv("Data/raw/01.01.2022-national.csv", sep = ";", header = TRUE, stringsAsFactors=FALSE)
colnames(arm_data_2022)[c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)] <- c(
"N",
"Full_Name_arm",
"Full_Name",
"FIDE_ID",
"Region",
"City",
"Title",
"DOB",
"Gender",
"Nat_ID",
"Status",
"S_Rtg",
"Games_Played",
"Rating_Change",
"R_Rtg"
)
arm_data_2022 <- arm_data_2022[-c(1, 2,3), ]
arm_data_2022 <- subset(arm_data_2022, select = -FIDE_ID)
arm_data_2022$Year <- sapply(arm_data_2022$DOB, extract_year)
arm_data_2022 <- arm_data_2022 %>%
mutate_at(vars(Year, S_Rtg, Games_Played, Rating_Change, R_Rtg), as.numeric)
arm_data_2022$Gender <- gender_translation[arm_data_2022$Gender]
arm_data_2022$Region <- region_translation[arm_data_2022$Region]
arm_data_2022 <- add_age(arm_data_2022, 2022)
arm_data_2023 <- read.csv("Data/raw/01.01.2023-national.csv", sep = ";", header = TRUE, stringsAsFactors=FALSE)
colnames(arm_data_2023)[c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)] <- c(
"N",
"Full_Name_arm",
"Full_Name",
"FIDE_ID",
"Region",
"City",
"Title",
"DOB",
"Gender",
"Nat_ID",
"Status",
"S_Rtg",
"Games_Played",
"Rating_Change",
"R_Rtg"
)
arm_data_2023 <- arm_data_2023[-c(1, 2, 3), ]
arm_data_2023 <- subset(arm_data_2023, select = -FIDE_ID)
arm_data_2023$Year <- sapply(arm_data_2023$DOB, extract_year)
arm_data_2023 <- arm_data_2023 %>%
mutate_at(vars(Year,S_Rtg, Games_Played, Rating_Change, R_Rtg), as.numeric)
arm_data_2023$Gender <- gender_translation[arm_data_2023$Gender]
arm_data_2023$Region <- region_translation[arm_data_2023$Region]
arm_data_2023 <- add_age(arm_data_2023, 2023)
arm_data_2024 <- read.csv("Data/raw/01.01.2024-national.csv", sep = ";", header = TRUE, stringsAsFactors=FALSE)
colnames(arm_data_2024)[c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)] <- c(
"N",
"Full_Name_arm",
"Full_Name",
"FIDE_ID",
"Region",
"City",
"Title",
"DOB",
"Gender",
"Nat_ID",
"Status",
"S_Rtg",
"Games_Played",
"Rating_Change",
"R_Rtg"
)
arm_data_2024 <- arm_data_2024[-c(1, 2, 3), ]
arm_data_2024 <- subset(arm_data_2024, select = -FIDE_ID)
arm_data_2024$Year <- sapply(arm_data_2024$DOB, extract_year)
arm_data_2024 <- arm_data_2024 %>%
mutate_at(vars(Year,S_Rtg, Games_Played, Rating_Change, R_Rtg), as.numeric)
arm_data_2024$Gender <- gender_translation[arm_data_2024$Gender]
arm_data_2024$Region <- region_translation[arm_data_2024$Region]
arm_data_2024 <- add_age(arm_data_2024, 2024)
arm_data_2020 <- arm_data_2020 %>%
mutate(Age_Group = sapply(Age, assign_age_group))
arm_data_2021 <- arm_data_2021 %>%
mutate(Age_Group = sapply(Age, assign_age_group))
arm_data_2022 <- arm_data_2022 %>%
mutate(Age_Group = sapply(Age, assign_age_group))
arm_data_2023 <- arm_data_2023 %>%
mutate(Age_Group = sapply(Age, assign_age_group))
arm_data_2024 <- arm_data_2024 %>%
mutate(Age_Group = sapply(Age, assign_age_group))
player_trend <- arm_data %>%
group_by(Year_of_Birth, Born_After_2004) %>%
summarize(Player_Count = n(), .groups = "drop")
combined_data <- bind_rows(
arm_data_2020 %>% mutate(Data_Year = 2020),
arm_data_2021 %>% mutate(Data_Year = 2021),
arm_data_2022 %>% mutate(Data_Year = 2022),
arm_data_2023 %>% mutate(Data_Year = 2023),
arm_data_2024 %>% mutate(Data_Year = 2024),
)
combined_data <- combined_data %>%
mutate(S_Rtg = ifelse(S_Rtg == "1111", 1900, S_Rtg))
combined_data_age_groups <- combined_data %>%
filter(!is.na(Age_Group) & (Age_Group != "Other"))
combined_parcoordplot <- combined_data_age_groups[(!is.na(combined_data_age_groups$S_Rtg))& (!is.na(combined_data_age_groups$R_Rtg)) & (combined_data_age_groups$R_Rtg != 0) & (combined_data_age_groups$S_Rtg != 0),]
combined_parcoordplot <- combined_parcoordplot %>%
select(c("Full_Name_arm","S_Rtg", "R_Rtg", "Data_Year")) %>%
arrange(Full_Name_arm)
reshaped_data <- combined_parcoordplot %>%
mutate(
S_Rtg = scale(S_Rtg),
R_Rtg = scale(R_Rtg)
) %>%
pivot_longer(cols = c(S_Rtg, R_Rtg), names_to = "Rating_Type", values_to = "Rating_Value") %>%
group_by(Full_Name_arm) %>%
filter(n() == 10) %>%
ungroup()
combined_parcoordplot <- combined_data_age_groups[(!is.na(combined_data_age_groups$S_Rtg))& (!is.na(combined_data_age_groups$R_Rtg)) & (combined_data_age_groups$R_Rtg != 0) & (combined_data_age_groups$S_Rtg != 0),]
combined_parcoordplot <- combined_parcoordplot %>%
select(c("Full_Name_arm","S_Rtg", "R_Rtg", "Data_Year")) %>%
arrange(Full_Name_arm)
reshaped_data <- combined_parcoordplot %>%
mutate(
S_Rtg = scale(S_Rtg),
R_Rtg = scale(R_Rtg)
) %>%
pivot_longer(cols = c(S_Rtg, R_Rtg), names_to = "Rating_Type", values_to = "Rating_Value") %>%
group_by(Full_Name_arm) %>%
filter(n() == 10) %>%
ungroup()
knitr::opts_chunk$set(echo = FALSE, #hide codes
warning = FALSE, #no warnings
message = FALSE) #no messages
knitr::include_graphics("Img/Zodiac.jpg")
knitr::include_graphics("Img/Zodiac.jpg")
knitr::include_graphics("Img/Zodiac.jpg")
